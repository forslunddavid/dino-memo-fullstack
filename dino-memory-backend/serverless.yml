service: dino-memory-backend

provider:
    name: aws
    runtime: nodejs20.x
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'eu-north-1'}
    environment:
        GAMES_TABLE: ${self:service}-${self:provider.stage}-games
        DINOSAURS_TABLE: ${self:service}-${self:provider.stage}-dinosaurs
        CONNECTIONS_TABLE: ${self:service}-${self:provider.stage}-connections
        WEBSOCKET_ENDPOINT:
            Fn::Join:
                - ""
                - - "https://"
                  - Ref: WebsocketsApi
                  - ".execute-api."
                  - ${self:provider.region}
                  - ".amazonaws.com/${self:provider.stage}"
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                  Resource:
                      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}"
                      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DINOSAURS_TABLE}"
                      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}"
                      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}/index/*"
                - Effect: Allow
                  Action:
                      - execute-api:ManageConnections
                  Resource:
                      - "arn:aws:execute-api:${self:provider.region}:*:*/@connections/*"

functions:
    createGame:
        handler: index.createGame
        events:
            - http:
                  path: game
                  method: post
                  cors: true
    getGame:
        handler: index.getGame
        events:
            - http:
                  path: game/{gameId}
                  method: get
                  cors: true
    updateGame:
        handler: index.updateGame
        events:
            - http:
                  path: game/{gameId}
                  method: put
                  cors: true
    joinGame:
        handler: index.joinGame
        events:
            - http:
                  path: game/{gameId}/join
                  method: put
                  cors: true
    websocketConnect:
        handler: index.websocketConnect
        events:
            - websocket: $connect
    websocketDisconnect:
        handler: index.websocketDisconnect
        events:
            - websocket: $disconnect
    websocketDefault:
        handler: index.websocketDefault
        events:
            - websocket: $default

resources:
    Resources:
        GamesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.GAMES_TABLE}
                AttributeDefinitions:
                    - AttributeName: gameId
                      AttributeType: S
                KeySchema:
                    - AttributeName: gameId
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        DinosaursTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.DINOSAURS_TABLE}
                AttributeDefinitions:
                    - AttributeName: species
                      AttributeType: S
                KeySchema:
                    - AttributeName: species
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        ConnectionsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.CONNECTIONS_TABLE}
                AttributeDefinitions:
                    - AttributeName: connectionId
                      AttributeType: S
                    - AttributeName: gameId
                      AttributeType: S
                KeySchema:
                    - AttributeName: connectionId
                      KeyType: HASH
                GlobalSecondaryIndexes:
                    - IndexName: GameIdIndex
                      KeySchema:
                          - AttributeName: gameId
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                BillingMode: PAY_PER_REQUEST
        WebsocketsApi:
            Type: AWS::ApiGatewayV2::Api
            Properties:
                Name: ${self:service}-websockets-api
                ProtocolType: WEBSOCKET
                RouteSelectionExpression: $request.body.action

# custom:
#   esbuild:
#     bundle: true
#     minify: false

# plugins:
#   - serverless-esbuild

custom:
    esbuild:
        build: false
        wsApiId:
            Ref: WebsocketsApi
